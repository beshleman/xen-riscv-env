#!/bin/bash

set -e
set -x

kernel=linux/arch/riscv/boot/Image.gz
kernel_size=$(cat ${kernel} | wc -c)
uboot=u-boot/u-boot
opensbi=opensbi/build/platform/generic/firmware/fw_jump.elf
bootscr=./disk/boot.scr

page_up() {
    local out
    local alignment=0x1000
    let mask=$((${alignment} - 1))
    let mask=$((~${mask}))
    let out=$(($1 + ${alignment} * 2))
    let out=$((${out} & ${mask}))
    printf "0x%02lx" ${out}
}

kernel_start=0x80400000
kernel_end=$((${kernel_start} + ${kernel_size}))

printf "\nLaunching qemu-system-riscv64 with Boot Modules:\n"
printf "\tKernel: 0x%02x -> 0x%02x\n" ${DOM0_KERNEL} ${kernel_end}

./scripts/create_disk.sh

qemu-system-riscv64 \
	-cpu rv64,x-h=true \
	-M virt -m 1G -display none \
    -smp 1 \
	-serial stdio \
    -monitor telnet::45454,server,nowait  \
	-kernel ./u-boot/u-boot \
	-bios opensbi/build/platform/generic/firmware/fw_jump.elf \
	-device loader,file=${bootscr},addr=0x80a00000 \
    -device ich9-ahci,id=ahci \
    -drive if=none,file=./disk.img,format=raw,id=mydisk \
    -device ide-hd,drive=mydisk,bus=ahci.0 \
    -d in_asm -D qemu_log.txt -s -S # -machine dumpdtb=riscv64-qemu-virt.dtb
